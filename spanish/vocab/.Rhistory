library(datasets)  # Load built-in datasets
library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
p_unload(all)  # Easier: clears all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
head(iris)
?plot  # Help for plot()
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)  # Entire data frame
# Plot with options
plot(iris$Petal.Length, iris$Petal.Width,
col = "#cc0000",  # Hex code for datalab.cc red
pch = 19,         # Use solid circles for points
main = "Iris: Petal Length vs. Petal Width",
xlab = "Petal Length",
ylab = "Petal Width")
plot(cos, 0, 2*pi)
plot(exp, 1, 5)
plot(dnorm, -3, +3)
# Formula plot with options
plot(dnorm, -3, +3,
col = "#cc0000",
lwd = 5,
main = "Standard Normal Distribution",
xlab = "z-scores",
ylab = "Density")
# Clear packages
detach("package:datasets", unload = TRUE)
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)
?iris
head(iris)
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Histograms for each species using options
hist(iris$Petal.Width [iris$Species == "setosa"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Setosa",
xlab = "",
col = "red")
hist(iris$Petal.Width [iris$Species == "versicolor"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Versicolor",
xlab = "",
col = "purple")
hist(iris$Petal.Width [iris$Species == "virginica"],
xlim = c(0, 3),
breaks = 9,
main = "Petal Width for Virginica",
xlab = "",
col = "blue")
# Restore graphic parameter
par(mfrow=c(1, 1))
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
?mtcars
head(mtcars)
# Good to first check univariate distributions
hist(mtcars$wt)
hist(mtcars$mpg)
# Basic X-Y plot for two quantitative variables
plot(mtcars$wt, mtcars$mpg)
# Add some options
plot(mtcars$wt, mtcars$mpg,
pch = 19,         # Solid circle
cex = 1.5,        # Make 150% size
col = "#cc0000",  # Red
main = "MPG as a Function of Weight of Cars",
xlab = "Weight (in 1000 pounds)",
ylab = "MPG")
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load/unload base packages manually
# Annual Canadian Lynx trappings 1821-1934
?lynx
head(lynx)
# Default
hist(lynx)
# Add some options
hist(lynx,
breaks = 14,          # "Suggests" 14 bins
freq   = FALSE,       # Axis shows density, not freq.
col    = "thistle1",  # Color for histogram
main   = paste("Histogram of Annual Canadian Lynx",
"Trappings, 1821-1934"),
xlab   = "Number of Lynx Trapped")
# Add a normal distribution
curve(dnorm(x, mean = mean(lynx), sd = sd(lynx)),
col = "thistle4",  # Color of curve
lwd = 2,           # Line width of 2 pixels
add = TRUE)        # Superimpose on previous graph
# Add two kernel density estimators
lines(density(lynx), col = "blue", lwd = 2)
lines(density(lynx, adjust = 3), col = "purple", lwd = 2)
# Add a rug plot
rug(lynx, lwd = 2, col = "gray")
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(pacman)
pacman::p_load(shiny, shinythemes)
# create Shiny app
shinyApp(ui = ui, server = server)
# create Shiny app
shinyApp(ui = ui, server = server)
# create Shiny app
shinyApp(ui = ui, server = server)
# create Shiny app
shinyApp(ui = ui, server = server)
runApp('Downloads/shinyAppOneYT.R')
runApp('Downloads/shinyAppOneYT.R')
runApp('Downloads/shinyAppOneYT.R')
runApp('Downloads/shinyAppOneYT.R')
library(shiny); runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
runApp('code/R/myReaLProTestOne/app2.R')
source('code/R/paulShannon/pictureViewer_Yaml.R')
source('code/R/paulShannon/pictureViewer_Yaml.R')
install.packages("yaml")
library(shiny); source('code/R/paulShannon/pictureViewer_Yaml.R')
sample(1:9,1)
names(myList[numChoice()])
names(myList[numChoice()])
myList[numChoice()]
selectInput(
inputId = "reelSelector",
label = "Reels",
choices = c("no selection", subset(tbl.config, genre=="Irish" & timeSignature=="4/4")$name),
selected = NULL)
getwd()
setwd("/Users/rhoffman/code/R/R_projects/spanish/vo")
setwd("/Users/rhoffman/code/R/R_projects/spanish/vocab")
getwd()
getwd()
